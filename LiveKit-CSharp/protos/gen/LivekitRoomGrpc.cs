// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: livekit_room.proto
// </auto-generated>
// Original file comments:
// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Livekit {
  /// <summary>
  /// Room service that can be performed on any node
  /// they are Twirp-based HTTP req/responses
  /// </summary>
  public static partial class RoomService
  {
    static readonly string __ServiceName = "livekit.RoomService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.CreateRoomRequest> __Marshaller_livekit_CreateRoomRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.CreateRoomRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.Room> __Marshaller_livekit_Room = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.Room.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.ListRoomsRequest> __Marshaller_livekit_ListRoomsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.ListRoomsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.ListRoomsResponse> __Marshaller_livekit_ListRoomsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.ListRoomsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.DeleteRoomRequest> __Marshaller_livekit_DeleteRoomRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.DeleteRoomRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.DeleteRoomResponse> __Marshaller_livekit_DeleteRoomResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.DeleteRoomResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.ListParticipantsRequest> __Marshaller_livekit_ListParticipantsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.ListParticipantsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.ListParticipantsResponse> __Marshaller_livekit_ListParticipantsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.ListParticipantsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.RoomParticipantIdentity> __Marshaller_livekit_RoomParticipantIdentity = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.RoomParticipantIdentity.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.ParticipantInfo> __Marshaller_livekit_ParticipantInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.ParticipantInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.RemoveParticipantResponse> __Marshaller_livekit_RemoveParticipantResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.RemoveParticipantResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.MuteRoomTrackRequest> __Marshaller_livekit_MuteRoomTrackRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.MuteRoomTrackRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.MuteRoomTrackResponse> __Marshaller_livekit_MuteRoomTrackResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.MuteRoomTrackResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.UpdateParticipantRequest> __Marshaller_livekit_UpdateParticipantRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.UpdateParticipantRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.UpdateSubscriptionsRequest> __Marshaller_livekit_UpdateSubscriptionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.UpdateSubscriptionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.UpdateSubscriptionsResponse> __Marshaller_livekit_UpdateSubscriptionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.UpdateSubscriptionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.SendDataRequest> __Marshaller_livekit_SendDataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.SendDataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.SendDataResponse> __Marshaller_livekit_SendDataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.SendDataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.UpdateRoomMetadataRequest> __Marshaller_livekit_UpdateRoomMetadataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.UpdateRoomMetadataRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.CreateRoomRequest, global::Livekit.Room> __Method_CreateRoom = new grpc::Method<global::Livekit.CreateRoomRequest, global::Livekit.Room>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateRoom",
        __Marshaller_livekit_CreateRoomRequest,
        __Marshaller_livekit_Room);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.ListRoomsRequest, global::Livekit.ListRoomsResponse> __Method_ListRooms = new grpc::Method<global::Livekit.ListRoomsRequest, global::Livekit.ListRoomsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListRooms",
        __Marshaller_livekit_ListRoomsRequest,
        __Marshaller_livekit_ListRoomsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.DeleteRoomRequest, global::Livekit.DeleteRoomResponse> __Method_DeleteRoom = new grpc::Method<global::Livekit.DeleteRoomRequest, global::Livekit.DeleteRoomResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRoom",
        __Marshaller_livekit_DeleteRoomRequest,
        __Marshaller_livekit_DeleteRoomResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.ListParticipantsRequest, global::Livekit.ListParticipantsResponse> __Method_ListParticipants = new grpc::Method<global::Livekit.ListParticipantsRequest, global::Livekit.ListParticipantsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListParticipants",
        __Marshaller_livekit_ListParticipantsRequest,
        __Marshaller_livekit_ListParticipantsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.RoomParticipantIdentity, global::Livekit.ParticipantInfo> __Method_GetParticipant = new grpc::Method<global::Livekit.RoomParticipantIdentity, global::Livekit.ParticipantInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipant",
        __Marshaller_livekit_RoomParticipantIdentity,
        __Marshaller_livekit_ParticipantInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.RoomParticipantIdentity, global::Livekit.RemoveParticipantResponse> __Method_RemoveParticipant = new grpc::Method<global::Livekit.RoomParticipantIdentity, global::Livekit.RemoveParticipantResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveParticipant",
        __Marshaller_livekit_RoomParticipantIdentity,
        __Marshaller_livekit_RemoveParticipantResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.MuteRoomTrackRequest, global::Livekit.MuteRoomTrackResponse> __Method_MutePublishedTrack = new grpc::Method<global::Livekit.MuteRoomTrackRequest, global::Livekit.MuteRoomTrackResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MutePublishedTrack",
        __Marshaller_livekit_MuteRoomTrackRequest,
        __Marshaller_livekit_MuteRoomTrackResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.UpdateParticipantRequest, global::Livekit.ParticipantInfo> __Method_UpdateParticipant = new grpc::Method<global::Livekit.UpdateParticipantRequest, global::Livekit.ParticipantInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateParticipant",
        __Marshaller_livekit_UpdateParticipantRequest,
        __Marshaller_livekit_ParticipantInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.UpdateSubscriptionsRequest, global::Livekit.UpdateSubscriptionsResponse> __Method_UpdateSubscriptions = new grpc::Method<global::Livekit.UpdateSubscriptionsRequest, global::Livekit.UpdateSubscriptionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSubscriptions",
        __Marshaller_livekit_UpdateSubscriptionsRequest,
        __Marshaller_livekit_UpdateSubscriptionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.SendDataRequest, global::Livekit.SendDataResponse> __Method_SendData = new grpc::Method<global::Livekit.SendDataRequest, global::Livekit.SendDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendData",
        __Marshaller_livekit_SendDataRequest,
        __Marshaller_livekit_SendDataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.UpdateRoomMetadataRequest, global::Livekit.Room> __Method_UpdateRoomMetadata = new grpc::Method<global::Livekit.UpdateRoomMetadataRequest, global::Livekit.Room>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateRoomMetadata",
        __Marshaller_livekit_UpdateRoomMetadataRequest,
        __Marshaller_livekit_Room);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Livekit.LivekitRoomReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RoomService</summary>
    [grpc::BindServiceMethod(typeof(RoomService), "BindService")]
    public abstract partial class RoomServiceBase
    {
      /// <summary>
      /// Creates a room with settings. Requires `roomCreate` permission.
      /// This method is optional; rooms are automatically created when clients connect to them for the first time.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.Room> CreateRoom(global::Livekit.CreateRoomRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List rooms that are active on the server. Requires `roomList` permission.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.ListRoomsResponse> ListRooms(global::Livekit.ListRoomsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes an existing room by name or id. Requires `roomCreate` permission.
      /// DeleteRoom will disconnect all participants that are currently in the room.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.DeleteRoomResponse> DeleteRoom(global::Livekit.DeleteRoomRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists participants in a room, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.ListParticipantsResponse> ListParticipants(global::Livekit.ListParticipantsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get information on a specific participant, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.ParticipantInfo> GetParticipant(global::Livekit.RoomParticipantIdentity request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes a participant from room. Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.RemoveParticipantResponse> RemoveParticipant(global::Livekit.RoomParticipantIdentity request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Mute/unmute a participant's track, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.MuteRoomTrackResponse> MutePublishedTrack(global::Livekit.MuteRoomTrackRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update participant metadata, will cause updates to be broadcasted to everyone in the room. Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.ParticipantInfo> UpdateParticipant(global::Livekit.UpdateParticipantRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribes or unsubscribe a participant from tracks. Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.UpdateSubscriptionsResponse> UpdateSubscriptions(global::Livekit.UpdateSubscriptionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Send data over data channel to participants in a room, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.SendDataResponse> SendData(global::Livekit.SendDataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update room metadata, will cause updates to be broadcasted to everyone in the room, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.Room> UpdateRoomMetadata(global::Livekit.UpdateRoomMetadataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RoomService</summary>
    public partial class RoomServiceClient : grpc::ClientBase<RoomServiceClient>
    {
      /// <summary>Creates a new client for RoomService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public RoomServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RoomService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public RoomServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected RoomServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected RoomServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a room with settings. Requires `roomCreate` permission.
      /// This method is optional; rooms are automatically created when clients connect to them for the first time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.Room CreateRoom(global::Livekit.CreateRoomRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRoom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a room with settings. Requires `roomCreate` permission.
      /// This method is optional; rooms are automatically created when clients connect to them for the first time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.Room CreateRoom(global::Livekit.CreateRoomRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateRoom, null, options, request);
      }
      /// <summary>
      /// Creates a room with settings. Requires `roomCreate` permission.
      /// This method is optional; rooms are automatically created when clients connect to them for the first time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.Room> CreateRoomAsync(global::Livekit.CreateRoomRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRoomAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a room with settings. Requires `roomCreate` permission.
      /// This method is optional; rooms are automatically created when clients connect to them for the first time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.Room> CreateRoomAsync(global::Livekit.CreateRoomRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateRoom, null, options, request);
      }
      /// <summary>
      /// List rooms that are active on the server. Requires `roomList` permission.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.ListRoomsResponse ListRooms(global::Livekit.ListRoomsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRooms(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List rooms that are active on the server. Requires `roomList` permission.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.ListRoomsResponse ListRooms(global::Livekit.ListRoomsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListRooms, null, options, request);
      }
      /// <summary>
      /// List rooms that are active on the server. Requires `roomList` permission.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.ListRoomsResponse> ListRoomsAsync(global::Livekit.ListRoomsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRoomsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List rooms that are active on the server. Requires `roomList` permission.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.ListRoomsResponse> ListRoomsAsync(global::Livekit.ListRoomsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListRooms, null, options, request);
      }
      /// <summary>
      /// Deletes an existing room by name or id. Requires `roomCreate` permission.
      /// DeleteRoom will disconnect all participants that are currently in the room.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.DeleteRoomResponse DeleteRoom(global::Livekit.DeleteRoomRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRoom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing room by name or id. Requires `roomCreate` permission.
      /// DeleteRoom will disconnect all participants that are currently in the room.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.DeleteRoomResponse DeleteRoom(global::Livekit.DeleteRoomRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRoom, null, options, request);
      }
      /// <summary>
      /// Deletes an existing room by name or id. Requires `roomCreate` permission.
      /// DeleteRoom will disconnect all participants that are currently in the room.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.DeleteRoomResponse> DeleteRoomAsync(global::Livekit.DeleteRoomRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRoomAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing room by name or id. Requires `roomCreate` permission.
      /// DeleteRoom will disconnect all participants that are currently in the room.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.DeleteRoomResponse> DeleteRoomAsync(global::Livekit.DeleteRoomRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRoom, null, options, request);
      }
      /// <summary>
      /// Lists participants in a room, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.ListParticipantsResponse ListParticipants(global::Livekit.ListParticipantsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListParticipants(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists participants in a room, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.ListParticipantsResponse ListParticipants(global::Livekit.ListParticipantsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListParticipants, null, options, request);
      }
      /// <summary>
      /// Lists participants in a room, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.ListParticipantsResponse> ListParticipantsAsync(global::Livekit.ListParticipantsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListParticipantsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists participants in a room, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.ListParticipantsResponse> ListParticipantsAsync(global::Livekit.ListParticipantsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListParticipants, null, options, request);
      }
      /// <summary>
      /// Get information on a specific participant, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.ParticipantInfo GetParticipant(global::Livekit.RoomParticipantIdentity request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipant(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get information on a specific participant, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.ParticipantInfo GetParticipant(global::Livekit.RoomParticipantIdentity request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipant, null, options, request);
      }
      /// <summary>
      /// Get information on a specific participant, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.ParticipantInfo> GetParticipantAsync(global::Livekit.RoomParticipantIdentity request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get information on a specific participant, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.ParticipantInfo> GetParticipantAsync(global::Livekit.RoomParticipantIdentity request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipant, null, options, request);
      }
      /// <summary>
      /// Removes a participant from room. Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.RemoveParticipantResponse RemoveParticipant(global::Livekit.RoomParticipantIdentity request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveParticipant(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a participant from room. Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.RemoveParticipantResponse RemoveParticipant(global::Livekit.RoomParticipantIdentity request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveParticipant, null, options, request);
      }
      /// <summary>
      /// Removes a participant from room. Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.RemoveParticipantResponse> RemoveParticipantAsync(global::Livekit.RoomParticipantIdentity request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveParticipantAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a participant from room. Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.RemoveParticipantResponse> RemoveParticipantAsync(global::Livekit.RoomParticipantIdentity request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveParticipant, null, options, request);
      }
      /// <summary>
      /// Mute/unmute a participant's track, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.MuteRoomTrackResponse MutePublishedTrack(global::Livekit.MuteRoomTrackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MutePublishedTrack(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Mute/unmute a participant's track, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.MuteRoomTrackResponse MutePublishedTrack(global::Livekit.MuteRoomTrackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MutePublishedTrack, null, options, request);
      }
      /// <summary>
      /// Mute/unmute a participant's track, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.MuteRoomTrackResponse> MutePublishedTrackAsync(global::Livekit.MuteRoomTrackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MutePublishedTrackAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Mute/unmute a participant's track, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.MuteRoomTrackResponse> MutePublishedTrackAsync(global::Livekit.MuteRoomTrackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MutePublishedTrack, null, options, request);
      }
      /// <summary>
      /// Update participant metadata, will cause updates to be broadcasted to everyone in the room. Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.ParticipantInfo UpdateParticipant(global::Livekit.UpdateParticipantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateParticipant(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update participant metadata, will cause updates to be broadcasted to everyone in the room. Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.ParticipantInfo UpdateParticipant(global::Livekit.UpdateParticipantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateParticipant, null, options, request);
      }
      /// <summary>
      /// Update participant metadata, will cause updates to be broadcasted to everyone in the room. Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.ParticipantInfo> UpdateParticipantAsync(global::Livekit.UpdateParticipantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateParticipantAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update participant metadata, will cause updates to be broadcasted to everyone in the room. Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.ParticipantInfo> UpdateParticipantAsync(global::Livekit.UpdateParticipantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateParticipant, null, options, request);
      }
      /// <summary>
      /// Subscribes or unsubscribe a participant from tracks. Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.UpdateSubscriptionsResponse UpdateSubscriptions(global::Livekit.UpdateSubscriptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSubscriptions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribes or unsubscribe a participant from tracks. Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.UpdateSubscriptionsResponse UpdateSubscriptions(global::Livekit.UpdateSubscriptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSubscriptions, null, options, request);
      }
      /// <summary>
      /// Subscribes or unsubscribe a participant from tracks. Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.UpdateSubscriptionsResponse> UpdateSubscriptionsAsync(global::Livekit.UpdateSubscriptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSubscriptionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribes or unsubscribe a participant from tracks. Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.UpdateSubscriptionsResponse> UpdateSubscriptionsAsync(global::Livekit.UpdateSubscriptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSubscriptions, null, options, request);
      }
      /// <summary>
      /// Send data over data channel to participants in a room, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.SendDataResponse SendData(global::Livekit.SendDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send data over data channel to participants in a room, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.SendDataResponse SendData(global::Livekit.SendDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendData, null, options, request);
      }
      /// <summary>
      /// Send data over data channel to participants in a room, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.SendDataResponse> SendDataAsync(global::Livekit.SendDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send data over data channel to participants in a room, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.SendDataResponse> SendDataAsync(global::Livekit.SendDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendData, null, options, request);
      }
      /// <summary>
      /// Update room metadata, will cause updates to be broadcasted to everyone in the room, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.Room UpdateRoomMetadata(global::Livekit.UpdateRoomMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRoomMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update room metadata, will cause updates to be broadcasted to everyone in the room, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.Room UpdateRoomMetadata(global::Livekit.UpdateRoomMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateRoomMetadata, null, options, request);
      }
      /// <summary>
      /// Update room metadata, will cause updates to be broadcasted to everyone in the room, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.Room> UpdateRoomMetadataAsync(global::Livekit.UpdateRoomMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRoomMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update room metadata, will cause updates to be broadcasted to everyone in the room, Requires `roomAdmin`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.Room> UpdateRoomMetadataAsync(global::Livekit.UpdateRoomMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateRoomMetadata, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override RoomServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RoomServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(RoomServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateRoom, serviceImpl.CreateRoom)
          .AddMethod(__Method_ListRooms, serviceImpl.ListRooms)
          .AddMethod(__Method_DeleteRoom, serviceImpl.DeleteRoom)
          .AddMethod(__Method_ListParticipants, serviceImpl.ListParticipants)
          .AddMethod(__Method_GetParticipant, serviceImpl.GetParticipant)
          .AddMethod(__Method_RemoveParticipant, serviceImpl.RemoveParticipant)
          .AddMethod(__Method_MutePublishedTrack, serviceImpl.MutePublishedTrack)
          .AddMethod(__Method_UpdateParticipant, serviceImpl.UpdateParticipant)
          .AddMethod(__Method_UpdateSubscriptions, serviceImpl.UpdateSubscriptions)
          .AddMethod(__Method_SendData, serviceImpl.SendData)
          .AddMethod(__Method_UpdateRoomMetadata, serviceImpl.UpdateRoomMetadata).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RoomServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateRoom, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.CreateRoomRequest, global::Livekit.Room>(serviceImpl.CreateRoom));
      serviceBinder.AddMethod(__Method_ListRooms, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.ListRoomsRequest, global::Livekit.ListRoomsResponse>(serviceImpl.ListRooms));
      serviceBinder.AddMethod(__Method_DeleteRoom, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.DeleteRoomRequest, global::Livekit.DeleteRoomResponse>(serviceImpl.DeleteRoom));
      serviceBinder.AddMethod(__Method_ListParticipants, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.ListParticipantsRequest, global::Livekit.ListParticipantsResponse>(serviceImpl.ListParticipants));
      serviceBinder.AddMethod(__Method_GetParticipant, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.RoomParticipantIdentity, global::Livekit.ParticipantInfo>(serviceImpl.GetParticipant));
      serviceBinder.AddMethod(__Method_RemoveParticipant, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.RoomParticipantIdentity, global::Livekit.RemoveParticipantResponse>(serviceImpl.RemoveParticipant));
      serviceBinder.AddMethod(__Method_MutePublishedTrack, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.MuteRoomTrackRequest, global::Livekit.MuteRoomTrackResponse>(serviceImpl.MutePublishedTrack));
      serviceBinder.AddMethod(__Method_UpdateParticipant, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.UpdateParticipantRequest, global::Livekit.ParticipantInfo>(serviceImpl.UpdateParticipant));
      serviceBinder.AddMethod(__Method_UpdateSubscriptions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.UpdateSubscriptionsRequest, global::Livekit.UpdateSubscriptionsResponse>(serviceImpl.UpdateSubscriptions));
      serviceBinder.AddMethod(__Method_SendData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.SendDataRequest, global::Livekit.SendDataResponse>(serviceImpl.SendData));
      serviceBinder.AddMethod(__Method_UpdateRoomMetadata, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.UpdateRoomMetadataRequest, global::Livekit.Room>(serviceImpl.UpdateRoomMetadata));
    }

  }
}
#endregion
