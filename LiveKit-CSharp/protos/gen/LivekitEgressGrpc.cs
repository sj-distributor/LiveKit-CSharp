// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: livekit_egress.proto
// </auto-generated>
// Original file comments:
// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Livekit {
  public static partial class Egress
  {
    static readonly string __ServiceName = "livekit.Egress";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.RoomCompositeEgressRequest> __Marshaller_livekit_RoomCompositeEgressRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.RoomCompositeEgressRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.EgressInfo> __Marshaller_livekit_EgressInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.EgressInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.TrackCompositeEgressRequest> __Marshaller_livekit_TrackCompositeEgressRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.TrackCompositeEgressRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.TrackEgressRequest> __Marshaller_livekit_TrackEgressRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.TrackEgressRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.WebEgressRequest> __Marshaller_livekit_WebEgressRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.WebEgressRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.UpdateLayoutRequest> __Marshaller_livekit_UpdateLayoutRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.UpdateLayoutRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.UpdateStreamRequest> __Marshaller_livekit_UpdateStreamRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.UpdateStreamRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.ListEgressRequest> __Marshaller_livekit_ListEgressRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.ListEgressRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.ListEgressResponse> __Marshaller_livekit_ListEgressResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.ListEgressResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Livekit.StopEgressRequest> __Marshaller_livekit_StopEgressRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Livekit.StopEgressRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.RoomCompositeEgressRequest, global::Livekit.EgressInfo> __Method_StartRoomCompositeEgress = new grpc::Method<global::Livekit.RoomCompositeEgressRequest, global::Livekit.EgressInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartRoomCompositeEgress",
        __Marshaller_livekit_RoomCompositeEgressRequest,
        __Marshaller_livekit_EgressInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.TrackCompositeEgressRequest, global::Livekit.EgressInfo> __Method_StartTrackCompositeEgress = new grpc::Method<global::Livekit.TrackCompositeEgressRequest, global::Livekit.EgressInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartTrackCompositeEgress",
        __Marshaller_livekit_TrackCompositeEgressRequest,
        __Marshaller_livekit_EgressInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.TrackEgressRequest, global::Livekit.EgressInfo> __Method_StartTrackEgress = new grpc::Method<global::Livekit.TrackEgressRequest, global::Livekit.EgressInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartTrackEgress",
        __Marshaller_livekit_TrackEgressRequest,
        __Marshaller_livekit_EgressInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.WebEgressRequest, global::Livekit.EgressInfo> __Method_StartWebEgress = new grpc::Method<global::Livekit.WebEgressRequest, global::Livekit.EgressInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartWebEgress",
        __Marshaller_livekit_WebEgressRequest,
        __Marshaller_livekit_EgressInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.UpdateLayoutRequest, global::Livekit.EgressInfo> __Method_UpdateLayout = new grpc::Method<global::Livekit.UpdateLayoutRequest, global::Livekit.EgressInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateLayout",
        __Marshaller_livekit_UpdateLayoutRequest,
        __Marshaller_livekit_EgressInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.UpdateStreamRequest, global::Livekit.EgressInfo> __Method_UpdateStream = new grpc::Method<global::Livekit.UpdateStreamRequest, global::Livekit.EgressInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateStream",
        __Marshaller_livekit_UpdateStreamRequest,
        __Marshaller_livekit_EgressInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.ListEgressRequest, global::Livekit.ListEgressResponse> __Method_ListEgress = new grpc::Method<global::Livekit.ListEgressRequest, global::Livekit.ListEgressResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListEgress",
        __Marshaller_livekit_ListEgressRequest,
        __Marshaller_livekit_ListEgressResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Livekit.StopEgressRequest, global::Livekit.EgressInfo> __Method_StopEgress = new grpc::Method<global::Livekit.StopEgressRequest, global::Livekit.EgressInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StopEgress",
        __Marshaller_livekit_StopEgressRequest,
        __Marshaller_livekit_EgressInfo);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Livekit.LivekitEgressReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Egress</summary>
    [grpc::BindServiceMethod(typeof(Egress), "BindService")]
    public abstract partial class EgressBase
    {
      /// <summary>
      /// start recording or streaming a room, participant, or tracks
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.EgressInfo> StartRoomCompositeEgress(global::Livekit.RoomCompositeEgressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.EgressInfo> StartTrackCompositeEgress(global::Livekit.TrackCompositeEgressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.EgressInfo> StartTrackEgress(global::Livekit.TrackEgressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.EgressInfo> StartWebEgress(global::Livekit.WebEgressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// update web composite layout
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.EgressInfo> UpdateLayout(global::Livekit.UpdateLayoutRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// add or remove stream endpoints
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.EgressInfo> UpdateStream(global::Livekit.UpdateStreamRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// list available egress
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.ListEgressResponse> ListEgress(global::Livekit.ListEgressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// stop a recording or stream
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Livekit.EgressInfo> StopEgress(global::Livekit.StopEgressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Egress</summary>
    public partial class EgressClient : grpc::ClientBase<EgressClient>
    {
      /// <summary>Creates a new client for Egress</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public EgressClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Egress that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public EgressClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected EgressClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected EgressClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// start recording or streaming a room, participant, or tracks
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.EgressInfo StartRoomCompositeEgress(global::Livekit.RoomCompositeEgressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartRoomCompositeEgress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// start recording or streaming a room, participant, or tracks
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.EgressInfo StartRoomCompositeEgress(global::Livekit.RoomCompositeEgressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartRoomCompositeEgress, null, options, request);
      }
      /// <summary>
      /// start recording or streaming a room, participant, or tracks
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.EgressInfo> StartRoomCompositeEgressAsync(global::Livekit.RoomCompositeEgressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartRoomCompositeEgressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// start recording or streaming a room, participant, or tracks
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.EgressInfo> StartRoomCompositeEgressAsync(global::Livekit.RoomCompositeEgressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartRoomCompositeEgress, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.EgressInfo StartTrackCompositeEgress(global::Livekit.TrackCompositeEgressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartTrackCompositeEgress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.EgressInfo StartTrackCompositeEgress(global::Livekit.TrackCompositeEgressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartTrackCompositeEgress, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.EgressInfo> StartTrackCompositeEgressAsync(global::Livekit.TrackCompositeEgressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartTrackCompositeEgressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.EgressInfo> StartTrackCompositeEgressAsync(global::Livekit.TrackCompositeEgressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartTrackCompositeEgress, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.EgressInfo StartTrackEgress(global::Livekit.TrackEgressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartTrackEgress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.EgressInfo StartTrackEgress(global::Livekit.TrackEgressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartTrackEgress, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.EgressInfo> StartTrackEgressAsync(global::Livekit.TrackEgressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartTrackEgressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.EgressInfo> StartTrackEgressAsync(global::Livekit.TrackEgressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartTrackEgress, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.EgressInfo StartWebEgress(global::Livekit.WebEgressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartWebEgress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.EgressInfo StartWebEgress(global::Livekit.WebEgressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartWebEgress, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.EgressInfo> StartWebEgressAsync(global::Livekit.WebEgressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartWebEgressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.EgressInfo> StartWebEgressAsync(global::Livekit.WebEgressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartWebEgress, null, options, request);
      }
      /// <summary>
      /// update web composite layout
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.EgressInfo UpdateLayout(global::Livekit.UpdateLayoutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateLayout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// update web composite layout
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.EgressInfo UpdateLayout(global::Livekit.UpdateLayoutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateLayout, null, options, request);
      }
      /// <summary>
      /// update web composite layout
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.EgressInfo> UpdateLayoutAsync(global::Livekit.UpdateLayoutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateLayoutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// update web composite layout
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.EgressInfo> UpdateLayoutAsync(global::Livekit.UpdateLayoutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateLayout, null, options, request);
      }
      /// <summary>
      /// add or remove stream endpoints
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.EgressInfo UpdateStream(global::Livekit.UpdateStreamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// add or remove stream endpoints
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.EgressInfo UpdateStream(global::Livekit.UpdateStreamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateStream, null, options, request);
      }
      /// <summary>
      /// add or remove stream endpoints
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.EgressInfo> UpdateStreamAsync(global::Livekit.UpdateStreamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateStreamAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// add or remove stream endpoints
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.EgressInfo> UpdateStreamAsync(global::Livekit.UpdateStreamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateStream, null, options, request);
      }
      /// <summary>
      /// list available egress
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.ListEgressResponse ListEgress(global::Livekit.ListEgressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListEgress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// list available egress
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.ListEgressResponse ListEgress(global::Livekit.ListEgressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListEgress, null, options, request);
      }
      /// <summary>
      /// list available egress
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.ListEgressResponse> ListEgressAsync(global::Livekit.ListEgressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListEgressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// list available egress
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.ListEgressResponse> ListEgressAsync(global::Livekit.ListEgressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListEgress, null, options, request);
      }
      /// <summary>
      /// stop a recording or stream
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.EgressInfo StopEgress(global::Livekit.StopEgressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopEgress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// stop a recording or stream
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Livekit.EgressInfo StopEgress(global::Livekit.StopEgressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopEgress, null, options, request);
      }
      /// <summary>
      /// stop a recording or stream
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.EgressInfo> StopEgressAsync(global::Livekit.StopEgressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopEgressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// stop a recording or stream
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Livekit.EgressInfo> StopEgressAsync(global::Livekit.StopEgressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopEgress, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override EgressClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EgressClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(EgressBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_StartRoomCompositeEgress, serviceImpl.StartRoomCompositeEgress)
          .AddMethod(__Method_StartTrackCompositeEgress, serviceImpl.StartTrackCompositeEgress)
          .AddMethod(__Method_StartTrackEgress, serviceImpl.StartTrackEgress)
          .AddMethod(__Method_StartWebEgress, serviceImpl.StartWebEgress)
          .AddMethod(__Method_UpdateLayout, serviceImpl.UpdateLayout)
          .AddMethod(__Method_UpdateStream, serviceImpl.UpdateStream)
          .AddMethod(__Method_ListEgress, serviceImpl.ListEgress)
          .AddMethod(__Method_StopEgress, serviceImpl.StopEgress).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, EgressBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_StartRoomCompositeEgress, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.RoomCompositeEgressRequest, global::Livekit.EgressInfo>(serviceImpl.StartRoomCompositeEgress));
      serviceBinder.AddMethod(__Method_StartTrackCompositeEgress, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.TrackCompositeEgressRequest, global::Livekit.EgressInfo>(serviceImpl.StartTrackCompositeEgress));
      serviceBinder.AddMethod(__Method_StartTrackEgress, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.TrackEgressRequest, global::Livekit.EgressInfo>(serviceImpl.StartTrackEgress));
      serviceBinder.AddMethod(__Method_StartWebEgress, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.WebEgressRequest, global::Livekit.EgressInfo>(serviceImpl.StartWebEgress));
      serviceBinder.AddMethod(__Method_UpdateLayout, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.UpdateLayoutRequest, global::Livekit.EgressInfo>(serviceImpl.UpdateLayout));
      serviceBinder.AddMethod(__Method_UpdateStream, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.UpdateStreamRequest, global::Livekit.EgressInfo>(serviceImpl.UpdateStream));
      serviceBinder.AddMethod(__Method_ListEgress, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.ListEgressRequest, global::Livekit.ListEgressResponse>(serviceImpl.ListEgress));
      serviceBinder.AddMethod(__Method_StopEgress, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Livekit.StopEgressRequest, global::Livekit.EgressInfo>(serviceImpl.StopEgress));
    }

  }
}
#endregion
